/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.uib.owu.liferay.cas.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import es.uib.owu.liferay.cas.model.CasServiceUtil;
import es.uib.owu.liferay.cas.service.CasServiceUtilLocalService;
import es.uib.owu.liferay.cas.service.persistence.CasServiceUtilPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cas service util local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.uib.owu.liferay.cas.service.impl.CasServiceUtilLocalServiceImpl}.
 * </p>
 *
 * @author vrf495
 * @see es.uib.owu.liferay.cas.service.impl.CasServiceUtilLocalServiceImpl
 * @see es.uib.owu.liferay.cas.service.CasServiceUtilLocalServiceUtil
 * @generated
 */
public abstract class CasServiceUtilLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CasServiceUtilLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.uib.owu.liferay.cas.service.CasServiceUtilLocalServiceUtil} to access the cas service util local service.
	 */

	/**
	 * Adds the cas service util to the database. Also notifies the appropriate model listeners.
	 *
	 * @param casServiceUtil the cas service util
	 * @return the cas service util that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CasServiceUtil addCasServiceUtil(CasServiceUtil casServiceUtil)
		throws SystemException {
		casServiceUtil.setNew(true);

		return casServiceUtilPersistence.update(casServiceUtil);
	}

	/**
	 * Creates a new cas service util with the primary key. Does not add the cas service util to the database.
	 *
	 * @param casServiceId the primary key for the new cas service util
	 * @return the new cas service util
	 */
	@Override
	public CasServiceUtil createCasServiceUtil(long casServiceId) {
		return casServiceUtilPersistence.create(casServiceId);
	}

	/**
	 * Deletes the cas service util with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param casServiceId the primary key of the cas service util
	 * @return the cas service util that was removed
	 * @throws PortalException if a cas service util with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CasServiceUtil deleteCasServiceUtil(long casServiceId)
		throws PortalException, SystemException {
		return casServiceUtilPersistence.remove(casServiceId);
	}

	/**
	 * Deletes the cas service util from the database. Also notifies the appropriate model listeners.
	 *
	 * @param casServiceUtil the cas service util
	 * @return the cas service util that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CasServiceUtil deleteCasServiceUtil(CasServiceUtil casServiceUtil)
		throws SystemException {
		return casServiceUtilPersistence.remove(casServiceUtil);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CasServiceUtil.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return casServiceUtilPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.uib.owu.liferay.cas.model.impl.CasServiceUtilModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return casServiceUtilPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.uib.owu.liferay.cas.model.impl.CasServiceUtilModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return casServiceUtilPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return casServiceUtilPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return casServiceUtilPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CasServiceUtil fetchCasServiceUtil(long casServiceId)
		throws SystemException {
		return casServiceUtilPersistence.fetchByPrimaryKey(casServiceId);
	}

	/**
	 * Returns the cas service util with the primary key.
	 *
	 * @param casServiceId the primary key of the cas service util
	 * @return the cas service util
	 * @throws PortalException if a cas service util with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CasServiceUtil getCasServiceUtil(long casServiceId)
		throws PortalException, SystemException {
		return casServiceUtilPersistence.findByPrimaryKey(casServiceId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return casServiceUtilPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cas service utils.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.uib.owu.liferay.cas.model.impl.CasServiceUtilModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cas service utils
	 * @param end the upper bound of the range of cas service utils (not inclusive)
	 * @return the range of cas service utils
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CasServiceUtil> getCasServiceUtils(int start, int end)
		throws SystemException {
		return casServiceUtilPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cas service utils.
	 *
	 * @return the number of cas service utils
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCasServiceUtilsCount() throws SystemException {
		return casServiceUtilPersistence.countAll();
	}

	/**
	 * Updates the cas service util in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param casServiceUtil the cas service util
	 * @return the cas service util that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CasServiceUtil updateCasServiceUtil(CasServiceUtil casServiceUtil)
		throws SystemException {
		return casServiceUtilPersistence.update(casServiceUtil);
	}

	/**
	 * Returns the cas service util local service.
	 *
	 * @return the cas service util local service
	 */
	public es.uib.owu.liferay.cas.service.CasServiceUtilLocalService getCasServiceUtilLocalService() {
		return casServiceUtilLocalService;
	}

	/**
	 * Sets the cas service util local service.
	 *
	 * @param casServiceUtilLocalService the cas service util local service
	 */
	public void setCasServiceUtilLocalService(
		es.uib.owu.liferay.cas.service.CasServiceUtilLocalService casServiceUtilLocalService) {
		this.casServiceUtilLocalService = casServiceUtilLocalService;
	}

	/**
	 * Returns the cas service util remote service.
	 *
	 * @return the cas service util remote service
	 */
	public es.uib.owu.liferay.cas.service.CasServiceUtilService getCasServiceUtilService() {
		return casServiceUtilService;
	}

	/**
	 * Sets the cas service util remote service.
	 *
	 * @param casServiceUtilService the cas service util remote service
	 */
	public void setCasServiceUtilService(
		es.uib.owu.liferay.cas.service.CasServiceUtilService casServiceUtilService) {
		this.casServiceUtilService = casServiceUtilService;
	}

	/**
	 * Returns the cas service util persistence.
	 *
	 * @return the cas service util persistence
	 */
	public CasServiceUtilPersistence getCasServiceUtilPersistence() {
		return casServiceUtilPersistence;
	}

	/**
	 * Sets the cas service util persistence.
	 *
	 * @param casServiceUtilPersistence the cas service util persistence
	 */
	public void setCasServiceUtilPersistence(
		CasServiceUtilPersistence casServiceUtilPersistence) {
		this.casServiceUtilPersistence = casServiceUtilPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("es.uib.owu.liferay.cas.model.CasServiceUtil",
			casServiceUtilLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"es.uib.owu.liferay.cas.model.CasServiceUtil");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CasServiceUtil.class;
	}

	protected String getModelClassName() {
		return CasServiceUtil.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = casServiceUtilPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = es.uib.owu.liferay.cas.service.CasServiceUtilLocalService.class)
	protected es.uib.owu.liferay.cas.service.CasServiceUtilLocalService casServiceUtilLocalService;
	@BeanReference(type = es.uib.owu.liferay.cas.service.CasServiceUtilService.class)
	protected es.uib.owu.liferay.cas.service.CasServiceUtilService casServiceUtilService;
	@BeanReference(type = CasServiceUtilPersistence.class)
	protected CasServiceUtilPersistence casServiceUtilPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CasServiceUtilLocalServiceClpInvoker _clpInvoker = new CasServiceUtilLocalServiceClpInvoker();
}